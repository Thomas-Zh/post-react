{"version":3,"sources":["components/showpost.component.js","components/editpost.component.js","components/createpost.component.js","App.js","serviceWorker.js","index.js"],"names":["ShowPost","react_default","a","createElement","Component","EditPost","CreatePost","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","content","onChangePostTitle","bind","assertThisInitialized","onChangePostContent","onSubmit","e","setState","target","value","preventDefault","createPost","axios","post","then","res","console","log","data","catch","error","alert","className","type","onChange","App","react_router_dom","basename","process","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRAEqBA,mLAEb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BAJsBC,aCAjBC,mLAEb,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BAJsBC,qCCCjBE,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,MAAO,GACPC,QAAQ,IAEZT,EAAKU,kBAAkBV,EAAKU,kBAAkBC,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACvBA,EAAKa,oBAAoBb,EAAKa,oBAAoBF,KAAzBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACzBA,EAAKc,SAAWd,EAAKc,SAASH,KAAdV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARDA,iFAUDe,GACdZ,KAAKa,SAAS,CACVR,MAAOO,EAAEE,OAAOC,oDAGJH,GAChBZ,KAAKa,SAAS,CACVP,QAAQM,EAAEE,OAAOC,yCAGhBH,GACLA,EAAEI,iBACF,IAAMC,EAAY,CACdZ,MAAML,KAAKI,MAAMC,MACjBC,QAAQN,KAAKI,MAAME,SAEvBY,IAAMC,KAAK,qCAAsCF,GAC5CG,KAAK,SAACC,GAAD,OAASC,QAAQC,IAAIF,EAAIG,QAC9BC,MAAM,SAACC,GAAD,OAAWJ,QAAQC,IAAIG,KAClCC,MAAM,kBACN3B,KAAKa,SAAU,CACXR,MAAO,GACPC,QAAQ,sCAIZ,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMmB,SAAUX,KAAKW,UACjBrB,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,YACXtC,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAQqC,KAAK,OACLD,UAAU,iBACVb,MAAOf,KAAKI,MAAMC,MAClByB,SAAU9B,KAAKO,oBAEvBjB,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,YACQoC,UAAU,mBACVb,MAAOf,KAAKI,MAAME,QAClBwB,SAAU9B,KAAKU,sBAEvBpB,EAAAC,EAAAC,cAAA,SAAOqC,KAAK,SAASd,MAAM,cAAca,UAAU,0BArDnCnC,aCoBzBsC,0LAbX,OACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAeC,SAAUC,eACzB5C,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,aACftC,EAAAC,EAAAC,cAAA,kBAEAF,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWhD,IAChCC,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAW1C,IACvCL,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAW3C,YATzBD,cCIE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.0dfab03c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ShowPost extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Show Post</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class EditPost extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Edit Post</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class CreatePost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            content:''\r\n        }\r\n        this.onChangePostTitle=this.onChangePostTitle.bind(this);\r\n        this.onChangePostContent=this.onChangePostContent.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onChangePostTitle(e) {\r\n        this.setState({\r\n            title: e.target.value\r\n        });\r\n    }\r\n    onChangePostContent(e){\r\n        this.setState({\r\n            content:e.target.value\r\n        });\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const createPost= {\r\n            title:this.state.title,\r\n            content:this.state.content\r\n        }\r\n        axios.post('http://localhost:3002/posts/create', createPost)\r\n            .then((res) => console.log(res.data))\r\n            .catch((error) => console.log(error));\r\n        alert('post submitted')\r\n        this.setState ({\r\n            title: '',\r\n            content:''\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"new-post\"> \r\n                        <label>Title: </label>\r\n                        <input  type=\"text\"\r\n                                className=\"new-post-title\"\r\n                                value={this.state.title}\r\n                                onChange={this.onChangePostTitle}\r\n                        />\r\n                        <label>Content:</label>\r\n                        <textarea\r\n                                className=\"new-post-content\"\r\n                                value={this.state.content}\r\n                                onChange={this.onChangePostContent}\r\n                        />\r\n                        <input type=\"submit\" value=\"Create Post\" className=\"create-post\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport ShowPost from \"./components/showpost.component\";\nimport EditPost from \"./components/editpost.component\";\nimport CreatePost from \"./components/createpost.component\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"Container\">\n      <h2>lol</h2>\n      </div>\n      <Route path=\"/posts\" component={ShowPost}/>\n      <Route path=\"/posts/create\" component={CreatePost}/>\n      <Route path=\"/posts/edit\" component={EditPost}/>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}